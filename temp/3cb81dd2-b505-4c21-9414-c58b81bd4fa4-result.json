{"name": "渠道新增成功", "status": "failed", "statusDetails": {"message": "AssertionError: Error: $.code is not equal to 200 in response content.", "trace": "self = <tests.test_guide_drainage_contact.Test object at 0x000001F196DB3D30>\ncase = {'case_name': '渠道新增成功', 'data': {'label': [{'label_group_id': 3456914784400576, 'label_id': 3456914784468160, 'wx_tag_... 'name': 'ws测试'}, 'expected': {200: '$.code', 'success': '$.message', True: '$.data.result'}, 'extract_key': None, ...}\n\n    @allure.feature(\"渠道管理\")\n    @pytest.mark.parametrize(\"case\", YamlUtil().get_testdata(\"./case/channels.yml\"))\n    def test_channel(self, case):\n>       SendRequest().send_request(case)\n\ntests\\test_guide_drainage_contact.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\sendrequest.py:39: in send_request\n    SendRequest().assert_jsonpath(res, expected)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.sendrequest.SendRequest object at 0x000001F196E19760>\nactual = {'code': 160105, 'message': '渠道名称已经存在', 'request_id': 'c2400ff4-c117-4939-b2d9-346e002e131d'}\nexpected = {200: '$.code', 'success': '$.message', True: '$.data.result'}\n\n    def assert_jsonpath(self, actual, expected):\n        '''\n    \n        :param actual: 接口的响应response\n        :param expected: yaml文件中需要通过jsonpath获取的字段值\n        :return: 返回在response中提取实际字段值\n        '''\n        for k, v in expected.items():\n            actual_value = jsonpath(actual, v)\n            assert actual_value, f\"Error: {v} is not found in response content.\"  # 判断是否找到目标值\n>           assert str(actual_value[0]) == str(k), f\"Error: {v} is not equal to {k} in response content.\"  # 判断是否相等\nE           AssertionError: Error: $.code is not equal to 200 in response content.\n\nutils\\sendrequest.py:53: AssertionError"}, "description": "请求 URL: /gw-scrm/gw-scrm/drainage-contact/channels-create\n请求方法: post\n预期结果: {200: '$.code', 'success': '$.message', True: '$.data.result'}", "steps": [{"name": "执行测试用例 渠道新增成功", "status": "passed", "start": 1695012513224, "stop": 1695012513224}], "attachments": [{"name": "log", "source": "d03cc367-5df9-4abe-82f0-ac188d559267-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "Test Case", "value": "test_channel[case0]"}], "start": 1695012513224, "stop": 1695012513431, "uuid": "f26b4753-6578-4512-9535-0a67119f7f58", "historyId": "c77a090341744926f79d324c483eeaee", "testCaseId": "aab4098fec95a201bbddb5a90db8dd2a", "fullName": "tests.test_guide_drainage_contact.Test#test_channel", "labels": [{"name": "feature", "value": "渠道管理"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_guide_drainage_contact"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "LAPTOP-3N3LAPIG"}, {"name": "thread", "value": "39772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_guide_drainage_contact"}]}