{"uid":"4f4755e49aa251fb","name":"渠道查询成功","fullName":"tests.test_guide_drainage_contact.Test#test_channel","historyId":"1ca4e71ec8ab10481e5ed06d0c4cdf44","time":{"start":1695012513547,"stop":1695012513735,"duration":188},"description":"请求 URL: /gw-scrm/gw-scrm/drainage-contact/channels-list\n请求方法: post\n预期结果: {200: '$.code', 'success': '$.message', 'ws测试渠道': '$.data.list[0].name'}","descriptionHtml":"<p>请求 URL: /gw-scrm/gw-scrm/drainage-contact/channels-list<br />\n请求方法: post<br />\n预期结果: {200: '$.code', 'success': '$.message', 'ws测试渠道': '$.data.list[0].name'}</p>\n","status":"failed","statusMessage":"AssertionError: Error: $.data.list[0].name is not equal to ws测试渠道 in response content.","statusTrace":"self = <tests.test_guide_drainage_contact.Test object at 0x000001F196DB3D00>\ncase = {'case_name': '渠道查询成功', 'data': {'channel_name': 'ws测试', 'page': 1, 'size': 10}, 'expected': {200: '$.code', 'success': '$.message', 'ws测试渠道': '$.data.list[0].name'}, 'extract_key': None, ...}\n\n    @allure.feature(\"渠道管理\")\n    @pytest.mark.parametrize(\"case\", YamlUtil().get_testdata(\"./case/channels.yml\"))\n    def test_channel(self, case):\n>       SendRequest().send_request(case)\n\ntests\\test_guide_drainage_contact.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\sendrequest.py:39: in send_request\n    SendRequest().assert_jsonpath(res, expected)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.sendrequest.SendRequest object at 0x000001F196D8CF10>\nactual = {'code': 200, 'data': {'list': [{'channel_labels': [{'deleted_at': 0, 'name': '4444-1'}], 'created_at': 1694976206, 'd... ...}], 'page': 1, 'size': 10, 'total': 2}, 'message': 'success', 'request_id': '2cff037d-1fa9-4438-b65d-028c70a18627'}\nexpected = {200: '$.code', 'success': '$.message', 'ws测试渠道': '$.data.list[0].name'}\n\n    def assert_jsonpath(self, actual, expected):\n        '''\n    \n        :param actual: 接口的响应response\n        :param expected: yaml文件中需要通过jsonpath获取的字段值\n        :return: 返回在response中提取实际字段值\n        '''\n        for k, v in expected.items():\n            actual_value = jsonpath(actual, v)\n            assert actual_value, f\"Error: {v} is not found in response content.\"  # 判断是否找到目标值\n>           assert str(actual_value[0]) == str(k), f\"Error: {v} is not equal to {k} in response content.\"  # 判断是否相等\nE           AssertionError: Error: $.data.list[0].name is not equal to ws测试渠道 in response content.\n\nutils\\sendrequest.py:53: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1695012511568,"stop":1695012511568,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_verify_url","time":{"start":1695012511568,"stop":1695012511568,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"请求 URL: /gw-scrm/gw-scrm/drainage-contact/channels-list\n请求方法: post\n预期结果: {200: '$.code', 'success': '$.message', 'ws测试渠道': '$.data.list[0].name'}","status":"failed","statusMessage":"AssertionError: Error: $.data.list[0].name is not equal to ws测试渠道 in response content.","statusTrace":"self = <tests.test_guide_drainage_contact.Test object at 0x000001F196DB3D00>\ncase = {'case_name': '渠道查询成功', 'data': {'channel_name': 'ws测试', 'page': 1, 'size': 10}, 'expected': {200: '$.code', 'success': '$.message', 'ws测试渠道': '$.data.list[0].name'}, 'extract_key': None, ...}\n\n    @allure.feature(\"渠道管理\")\n    @pytest.mark.parametrize(\"case\", YamlUtil().get_testdata(\"./case/channels.yml\"))\n    def test_channel(self, case):\n>       SendRequest().send_request(case)\n\ntests\\test_guide_drainage_contact.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\sendrequest.py:39: in send_request\n    SendRequest().assert_jsonpath(res, expected)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.sendrequest.SendRequest object at 0x000001F196D8CF10>\nactual = {'code': 200, 'data': {'list': [{'channel_labels': [{'deleted_at': 0, 'name': '4444-1'}], 'created_at': 1694976206, 'd... ...}], 'page': 1, 'size': 10, 'total': 2}, 'message': 'success', 'request_id': '2cff037d-1fa9-4438-b65d-028c70a18627'}\nexpected = {200: '$.code', 'success': '$.message', 'ws测试渠道': '$.data.list[0].name'}\n\n    def assert_jsonpath(self, actual, expected):\n        '''\n    \n        :param actual: 接口的响应response\n        :param expected: yaml文件中需要通过jsonpath获取的字段值\n        :return: 返回在response中提取实际字段值\n        '''\n        for k, v in expected.items():\n            actual_value = jsonpath(actual, v)\n            assert actual_value, f\"Error: {v} is not found in response content.\"  # 判断是否找到目标值\n>           assert str(actual_value[0]) == str(k), f\"Error: {v} is not equal to {k} in response content.\"  # 判断是否相等\nE           AssertionError: Error: $.data.list[0].name is not equal to ws测试渠道 in response content.\n\nutils\\sendrequest.py:53: AssertionError","steps":[{"name":"执行测试用例 渠道查询成功","time":{"start":1695012513547,"stop":1695012513547,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[{"uid":"268b6c07b799e173","name":"log","source":"268b6c07b799e173.txt","type":"text/plain","size":1849}],"parameters":[],"hasContent":true,"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"渠道管理"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_guide_drainage_contact"},{"name":"subSuite","value":"Test"},{"name":"host","value":"LAPTOP-3N3LAPIG"},{"name":"thread","value":"39772-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_guide_drainage_contact"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Test Case","value":"test_channel[case1]"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4f4755e49aa251fb.json","parameterValues":["test_channel[case1]"]}